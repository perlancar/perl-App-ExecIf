#!/usr/bin/perl

use 5.010001;
use strict;
use warnings;

#use Getopt::Long;

# VERSION

my $Env;
my @Cmd;

sub parse_cmdline {
    #Getopt::Long::Configure("nopass_through");
    my $usage = <<USAGE;
Usage:
  $0 [ENV] [command] [command options ...]
  $0 --help
For more details, see the manpage/documentation.
USAGE

    #my $res = GetOptions(
    #    'help|h'         => sub { print $usage; exit 0 },
    #);
    #exit 99 if !$res;

    # to minimize overhead, we don't use Getopt::Long for now
    if ($ARGV[0] && ($ARGV[0] eq '--help' || $ARGV[0] eq '-h')) {
        print $usage; exit 0;
    }

    do { warn "Environment not specified\n"; exit 99 } unless @ARGV;
    $Env = shift @ARGV;
    do { warn "Command not specified\n"; exit 99 } unless @ARGV;
    @Cmd = @ARGV;
}

# MAIN

parse_cmdline();
exec @Cmd if $ENV{$Env};

1;
# ABSTRACT: Execute command if certain environment variable is true
# PODNAME: exec-if-env

=head1 SYNOPSIS

Usage:

 % exec-if-env RUN somecmd --cmdopt ...

The above will run C<somecmd> only if C<RUN> environment variable is true (with
the notion of true follows Perl, i.e undefined, C<''>, and C<0> are false and
the rest are true).


=head1 DESCRIPTION


=head1 OPTIONS

=over

=item * --help, -h

=back


=head1 EXIT CODES

99 on command-line options error.

Otherwise exit code from command is returned.


=head1 FAQ

=head2 Couldn't the same thing be accomplished with shell?

Yes, you can also do something like this in bash:

 if [[ "$SOMEENV" == 1 ]]; then somecmd --cmdopt ...; fi

But using this utility is simpler and more portable.


=head1 TODO

=over

=item * Specify multiple envs with boolean logic

Example:

 ENV1|ENV2|ENV3
 ENV1 & (ENV2 | ENV3) & !ENV4

=back


=head1 SEE ALSO

L<App::ExecIf>

L<exec-if-not-env>

=cut
